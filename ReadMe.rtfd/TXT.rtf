{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red5\green49\blue103;}
\margl1440\margr1440\vieww16680\viewh13040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 This sample project goes along with my post on my blog The Powers of Observation:\
\
	{\field{\*\fldinst{HYPERLINK "http://subjectiveobserver.wordpress.com/2011/12/04/economies-of-scalar/"}}{\fldrslt http://subjectiveobserver.wordpress.com/2011/12/04/economies-of-scalar/}}\
\
There are four targets: the app target, and three mogenerator targets. The first mogenerator target uses the default mogenerator templates. This will result in a project that doesn't build, since the rest of the project's code assumes the standard getter/setter methods will be scalar based. But it's included for completeness.\
\
The second mogenerator target ("Version 1") uses custom templates included with the project that produce custom boilerplate\'96based scalar getter/setters. This is the "no-fun" target, since it works, but it doesn't use any of the fancy techniques described in the blog post.\
\
The third mogenerator target ("Version 2") uses custom templates that don't produce 
\i any
\i0  boilerplate methods at compile time, and only produce them at runtime if the OS is earlier that Mac OS X 10.7 "Lion". See the blog post for details.\
\
Since there are three possible ways to generate the templates, the app target doesn't run any of them beforehand. You'll need to run one mogenerator target, then the app target, in order to build and run the app successfully.\
\
The code is released under the MIT license. See here for details: {\field{\*\fldinst{HYPERLINK "http://opensource.org/licenses/mit-license.php"}}{\fldrslt http://opensource.org/licenses/mit-license.php}}\
\
To guard against bit rot, the entirety of the post is reproduced below.\
\
\'97 Andrew Pontious\
12/3/2011\
\
\pard\pardeftab720\sa140

\f1\b\fs40 \cf2 Economies of\'a0Scalar\
\pard\pardeftab720\sa300

\b0\fs26 \cf2 I came across something peculiar in a coworker\'92s custom Core Data entity class recently: boilerplate code for getter/setter methods that looked like it had been generated by Xcode, but was based on scalar rather than object values, like so:\
\pard\pardeftab720

\f2 \cf2 - (NSInteger)age;\
\
- (NSInteger)age \{\
    [self willAccessValueForKey:@"age"];\
    NSNumber *result = [self primitiveAge];\
    [self didAccessValueForKey:@"age"];\
    return [result integerValue];\
\}\
\pard\pardeftab720\sa300

\f1 \cf2 \
He swears this boilerplate code is untouched Xcode-generated code, but every Xcode I tried only generated object-based code. (Spoiler: he doesn\'92t remember, but I think he must have written it himself, like {\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CoreData/Articles/cdAccessorMethods.html"}}{\fldrslt \cf3 \ul \ulc3 Apple recommends}}.)\
Xcode doesn\'92t even generate object-based boilerplate anymore by default. As of 10.5 and up, the runtime will create object-based getter/setter methods for you, so Xcode only generates property stubs, like this:\
\pard\pardeftab720

\f2 \cf2 @property (nonatomic, retain) NSNumber *age;\
\
@dynamic age;\
\pard\pardeftab720\sa300

\f1 \cf2 \
Very nice, but Xcode 4.2 has a curious new checkbox called \'93Use scalar properties\'94 in the class generation sheet:\
\pard\pardeftab720\sa300

\f0\fs24 \cf0 {{\NeXTGraphic xcode-sheet.png \width7660 \height3580 \noorient
}¬}\pard\pardeftab720\sa300

\f1\fs26 \cf2 \
When you check it, the new property declaration/definition is indeed scalar-based:\
\pard\pardeftab720

\f2 \cf2 @property (nonatomic, retain) uint16_t age;\
\
@dynamic age;\
\pard\pardeftab720\sa300

\f1 \cf2 \
Could I use this to replace the mysterious boilerplate in my coworker\'92s class? Well\'85.\
If you build and run this, it\'92ll work just fine sometimes. But some people have reported problems with it. (Can\'92t find the link right now, sorry.) The trick is that this new ability to generate scalar-based getter/setters at runtime is limited to iOS 5 and Mac OS X 10.7 \'93Lion\'94, and won\'92t work on earlier versions of those OSes. (To make matters worse, Apple\'92s documentation hasn\'92t been updated to mention this scalar functionality at all.)\
Hm\'85I want the benefits of runtime-created getter/setters, which will almost certainly be more efficient than manually boxing and unboxing NSNumber objects in my own code\'85but I also want to support the older OSes. What\'92s a programmer to do?\
\pard\pardeftab720\sa300
{\field{\*\fldinst{HYPERLINK "http://rentzsch.github.com/mogenerator/"}}{\fldrslt \cf3 \ul \ulc3 mogenerator}} to the rescue!\
mogenerator is\'85well, I\'92ll just put in the \'93elevator pitch\'94 from the website:\
\pard\pardeftab720\li340\sa300
\cf2 mogenerator is a command-line tool that, given an .xcdatamodel file, will generate two classes per entity. The first class, _MyEntity, is intended solely for machine consumption and will be continuously overwritten to stay in sync with your data model. The second class, MyEntity, subclasses _MyEntity, won\'92t ever be overwritten and is a great place to put your custom logic.\
\pard\pardeftab720\sa300
\cf2 mogenerator\'92s default template declares object-based getter/setters and also declares a second set of fully-implemented scalar-based getter/setters. For example, if the object-based accessor is 
\f2 age
\f1 , then the the scalar-based getter is 
\f2 ageValue
\f1 .\
But I want something a little different: I want a scalar-based definition of 
\f2 age
\f1  and 
\f2 setAge:
\f1 , but only if the OS is earlier than 5.0/10.7. If not, I want no definition, so that the OS will generate it for me.\
How do I do that? Here\'92s a partial example of a mogenerator-generated \'93machine\'94 entity source code file, using my custom template:\
\pard\pardeftab720

\f2 \cf2 #import <objc/runtime.h>\
\
#import "OSVersion.h"\
\
@implementation _Measurements\
\
@dynamic age;\
\
static short ageIMP(id self, SEL _cmd) \{\
    [self willAccessValueForKey:@"age"];\
    NSNumber *result = [self primitiveAge];\
    [self didAccessValueForKey:@"age"];\
    return [result shortValue];\
\}\
\
+ (BOOL)resolveInstanceMethod:(SEL)selector \{\
    if ([OSVersion isLionOrGreater] == NO) \{\
        if (selector == @selector(age)) \{\
            class_addMethod([self class], selector, (IMP)ageIMP,\
                [[NSString stringWithFormat:@"%s@:", @encode(short)] UTF8String]);\
            return YES;\
    \}\
\
    return [super resolveInstanceMethod:selector];\
\}\
\pard\pardeftab720\sa300

\f1 \cf2 \
There are two tricks here. First is the use of 
\f2 resolveInstanceMethod:
\f1  to add the method implementation, stashed in the otherwise hidden 
\f2 ageIMP()
\f1  function. The code here is straight out of Apple\'92s documentation, so {\field{\*\fldinst{HYPERLINK "http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/nsobject_Class/Reference/Reference.html%23//apple_ref/occ/clm/NSObject/resolveInstanceMethod:"}}{\fldrslt \cf3 \ul \ulc3 take a look there for details}}.\
Second is the use of the custom class 
\f2 OSVersion
\f1 , which conveniently tells us which OS version we\'92re running on. That class is included in my {\field{\*\fldinst{HYPERLINK "http://github.com/apontious/mogenerator-Example"}}{\fldrslt \cf3 \ul \ulc3 mogenerator-Sample}} project on github (my first!).\
Note: my github project\'92s sample app uses scalar getter/setters via a rather impractical UI, because for simple projects, object-based methods really fit better with Cocoa design patterns. For example, an object must be used as the value of an NSTableView cell. It\'92s only when you have more custom UI (or none) that scalar methods start making sense.\
The most important detail, however, is that 
\f2 isLionOrGreater
\f1  must be fast, because it is called dozens of times for even one simple class. In my first implementation, which wasn\'92t fast, I managed to slow down our iPad app by about 30 seconds (!).}
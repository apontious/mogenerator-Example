//
//  _<$managedObjectClassName$>.m
//  mogenerator Example http://github.com/apontious/mogenerator-Example
//
//  Created by Andrew Pontious on 11/13/11.
//  Copyright (c) 2011 Andrew Pontious.
//  Some right reserved: http://opensource.org/licenses/mit-license.php
//

// This is Version 2 of the template files for this project, where the scalar getter/setter methods *not* implemented on 10.7 "Lion", but are generated at runtime on 10.6 "Snow Leopard" and earlier.

// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.m instead.

#import "_<$managedObjectClassName$>.h"

#import <objc/runtime.h>

#import "OSVersion.h"

@implementation <$managedObjectClassName$>ID
@end

@implementation _<$managedObjectClassName$>

+ (id)insertInManagedObjectContext:(NSManagedObjectContext *)moc_ {
	NSParameterAssert(moc_);
	return [NSEntityDescription insertNewObjectForEntityForName:@"<$name$>" inManagedObjectContext:moc_];
}

+ (NSString *)entityName {
	return @"<$name$>";
}

+ (NSEntityDescription *)entityInManagedObjectContext:(NSManagedObjectContext *)moc_ {
	NSParameterAssert(moc_);
	return [NSEntityDescription entityForName:@"<$name$>" inManagedObjectContext:moc_];
}

- (<$managedObjectClassName$>ID *)objectID {
	return (<$managedObjectClassName$>ID *)[super objectID];
}

<$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$>@dynamic <$Attribute.name$>;
<$endif$><$endforeach do$>

<$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$><$if Attribute.hasScalarAttributeType$>static <$Attribute.scalarAttributeType$> <$Attribute.name$>IMP(id self, SEL _cmd) {
	[self willAccessValueForKey:@"<$Attribute.name$>"];
	NSNumber *result = [self primitive<$Attribute.name.initialCapitalString$>];
	[self didAccessValueForKey:@"<$Attribute.name$>"];
	return [result <$Attribute.scalarAttributeType.camelCaseString$>Value];
}
static void set<$Attribute.name.initialCapitalString$>IMP(id self, SEL _cmd, <$Attribute.scalarAttributeType$> value) {
	[self willChangeValueForKey:@"<$Attribute.name$>"];
	[self setPrimitive<$Attribute.name.initialCapitalString$>:[NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>:value]];
	[self didChangeValueForKey:@"<$Attribute.name$>"];
}
<$endif$><$endif$><$endforeach do$>

+ (BOOL)resolveInstanceMethod:(SEL)selector {

	if ([OSVersion isLionOrGreater] == NO) {
<$foreach Attribute noninheritedAttributes do$><$if Attribute.hasDefinedAttributeType$><$if Attribute.hasScalarAttributeType$>        if (selector == @selector(<$Attribute.name$>)) {
              class_addMethod([self class], selector, (IMP)<$Attribute.name$>IMP, 
              				  [[NSString stringWithFormat:@"%s@:", @encode(<$Attribute.scalarAttributeType$>)] UTF8String]);
              return YES;
        } else if (selector == @selector(set<$Attribute.name.initialCapitalString$>:)) {
              class_addMethod([self class], selector, (IMP)set<$Attribute.name.initialCapitalString$>IMP, 
              				  [[NSString stringWithFormat:@"v@:%s", @encode(<$Attribute.scalarAttributeType$>)] UTF8String]);
              return YES;
        }
<$endif$><$endif$><$endforeach do$>
    }

	return [super resolveInstanceMethod:selector];
}

<$foreach Relationship noninheritedRelationships do$>
@dynamic <$Relationship.name$>;

	<$if Relationship.isToMany$>
- (<$Relationship.mutableCollectionClassName$> *)<$Relationship.name$>Set {
	[self willAccessValueForKey:@"<$Relationship.name$>"];
	<$Relationship.mutableCollectionClassName$> *result = (<$Relationship.mutableCollectionClassName$> *)[self mutableSetValueForKey:@"<$Relationship.name$>"];
	[self didAccessValueForKey:@"<$Relationship.name$>"];
	return result;
}
	<$endif$>
<$endforeach do$>

<$foreach FetchedProperty noninheritedFetchedProperties do$>
@dynamic <$FetchedProperty.name$>;
<$endforeach do$>

<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
+ (id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext *)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>{
	NSError *error = nil;
	id result = [self fetch<$FetchRequest.name.initialCapitalString$>:moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:<$Binding.name$>_ <$endforeach do2$>error:&error];
	if (error) {
#if TARGET_OS_IPHONE
		NSLog(@"error: %@", error);
#else
		[NSApp presentError:error];
#endif
	}
	return result;
}
+ (id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext *)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>error:(NSError **)error_ {
	NSParameterAssert(moc_);
	NSError *error = nil;
	
	NSManagedObjectModel *model = [[moc_ persistentStoreCoordinator] managedObjectModel];
	<$if FetchRequest.hasBindings$>
	NSDictionary *substitutionVariables = [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														<$Binding.name$>_, @"<$Binding.name$>",
														<$endforeach do2$>
														nil];
	<$else$>
	NSDictionary *substitutionVariables = [NSDictionary dictionary];
	<$endif$>
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName:@"<$FetchRequest.name$>"
													 substitutionVariables:substitutionVariables];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");
	
	id result = nil;
	NSArray *results = [moc_ executeFetchRequest:fetchRequest error:&error];
	
	if (!error) {
		switch ([results count]) {
			case 0:
				//	Nothing found matching the fetch request. That's cool, though: we'll just return nil.
				break;
			case 1:
				result = [results objectAtIndex:0];
				break;
			default:
				NSLog(@"WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, %u found (substitutionVariables:%@, results:%@)",
					[results count],
					substitutionVariables,
					results);
		}
	}
	
	if (error_) *error_ = error;
	return result;
}
<$else$>
+ (NSArray *)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext *)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>{
	NSError *error = nil;
	NSArray *result = [self fetch<$FetchRequest.name.initialCapitalString$>:moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:<$Binding.name$>_ <$endforeach do2$>error:&error];
	if (error) {
#if TARGET_OS_IPHONE
		NSLog(@"error: %@", error);
#else
		[NSApp presentError:error];
#endif
	}
	return result;
}
+ (NSArray *)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext *)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_ <$endforeach do2$>error:(NSError **)error_ {
	NSParameterAssert(moc_);
	NSError *error = nil;
	
	NSManagedObjectModel *model = [[moc_ persistentStoreCoordinator] managedObjectModel];
	<$if FetchRequest.hasBindings$>
	NSDictionary *substitutionVariables = [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														<$Binding.name$>_, @"<$Binding.name$>",
														<$endforeach do2$>
														nil];
	<$else$>
	NSDictionary *substitutionVariables = [NSDictionary dictionary];
	<$endif$>									
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName:@"<$FetchRequest.name$>"
													 substitutionVariables:substitutionVariables];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");
	
	NSArray *result = [moc_ executeFetchRequest:fetchRequest error:&error];
	if (error_) *error_ = error;
	return result;
}
<$endif$>
<$endforeach do$>
@end
